##########################################################
## 
## Imports
##
##########################################################

  # Dependencies imports
import sha, re, os

  # Class imports
import usermethods
#import documentmethods
import searchmethods
import tagmethods
#import commentmethods



##########################################################
## 
## Class: Database
##
##########################################################

class database():
  """
  Generally {type}methods-functions return a succes-boolean, and nothing else; 'get'-functions and search-functions are exceptions to this.

  For the creators of {type}methods-modules:
  Complementary properties are:
  {user1} follows {user2 of tag} - {user2 of tag} followed_by {user1}
  {user} interest {document} - {document} interests {user}
  {user} owner {document} - {document} owned_by {user}
  {user} contributor {document} - {document} contributed_to_by {user}
  
  """

### initialisatie
  def __init__(self):
  #moet hier nog iets staan?
    
### Document methods:
#
# For methods to get the comments on a document, see Comment methods

  ##########################################################
  ##
  ## Methods: Document
  ##
  ## (For methods to get the comments on a document, see Comment methods)
  ##########################################################
  """ Used shorthands:
    pid: person identifier
    did: document identifier"""

  def new_document(self, pid, owner, time):
    return documentmethods.new(pid, owner, time)
	
  def edit_document(self, did, name, content, pid, pid_contributor):
    return documentmethods.edit(did, name, content, pid, pid_contributor)
	
  def delete_document(self, did):
    return documentmethods.delete(did)

  def get_contributors(self, did):
    return documentmethods.contributors(did)

  def add_contributors(self, did, pid):
    return documentmethods.add_contri(did, pid)
  
  def remove_contributors(self, did, pid):
    return documentmethods.remove_contri(did, pid)
	
  #def set_document_property(id, property, value):
  #  return documentmethods.setproperty(id, property, value)
	
  #def delete_document_property_value(id, property, value):
  #  return documentmethods.deletepropertyvalue(id, property, value)
    
  def get_document(self, id):
    return documentmethods.get(id)

  #def get_document_property(id, property):
  #  return documentmethods.getproperty(id, property)	
	
  def get_document_version(self, id, version):
    return documentmethods.getversion(id, version)	

  #def get_document_version_property(id, version, property):
  #  return documentmethods.getversionproperty(id, version, property)	
	
  def interest_in_document(self, user_id, document_id):
	return usermethods.interest(user_id, document_id)	
	
### User methods:
#
# For methods to get the comments on or by a user, see Comment methods
	
  def new_user(self, name, password, email):
    return usermethods.new(name, password, email)
	
  def delete_user(self, id):
    return usermethods.delete(id)
  
  # for properties with only 1 value (for ex. name)
  def set_user_property_value(self, id, property, value):
    return usermethods.setpropertyvalue(id, property, value)
	
  # for properties with multiple values (for ex. diplomas, although these aren't in here now)
  def add_user_property_value(self, id, property, value):
    return usermethods.addpropertyvalue(id, property, value)

  def delete_user_property_value(self, id, property, value):
    return usermethods.deletepropertyvalue(id, property, value)
	
  def get_all_user_info(self, id):
    return usermethods.getallinfo(id)

  def get_user_property_value(self, id, property):
    return usermethods.getpropertyvalue(id, property)
	
  def follow_user(self, follower_id, followed_id):
	return usermethods.follow(follower_id, followed_id)
	
### Search methods:	
  def search_document(self, *args):
    # geef args van de vorm (eigenschap, waarde)
	  # returnt een array [document]
    return searchmethods.documents(*args)
	
  def search_user(self, *args):
    # geef args van de vorm (eigenschap, waarde)
	  # returnt een array [user]
    return searchmethods.users(*args)

	
### Tag methods:
#	
# Add a tag to a document by calling set_{type}_property
  
  def create_tag(self, tag, document):
    return tagmethods.add(tag, document)
	
  def delete_tag(self, tag, document):
    return tagmethods.delete(tag, document)
	
  def follow_tag(self, id, tag):
    return tagmethods.follow(id, tag)

	
### Comment methods:		
  def add_comment_user(self, comment, id, poster_id):
    return commentmethods.add(comment, id, poster_id)
	
  def add_comment_document(self, comment, document, poster_id):
    return commentmethods.add(comment, document, poster_id)
	
  def remove_comment(self, id):
    return commentmethods.remove(id)	

  def get_comments_on_user(self, id):
	# returnt een array [comment]  
    return commentmethods.commentsonuser(id)

  def get_comments_on_document(self, id):
	# returnt een array [comment] 
    return commentmethods.commentsondocument(id)

  def get_comments_by_user(self, id):
	# returnt een array [comment] 
	return commentsmethods.commentsbyuser(id)
  
### Termination
#
#
  def exitdb(self):
    g.commit()
    
if __name__== '__main__':
  db = database()
  # test
  db.new_user("a","b", "c@d.ee") 