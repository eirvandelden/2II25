### User methods:
#
# Overal geldt preconditie 'inputs zijn strings', en 'id is integer', tenzij anders vermeld.
import globals
import re    
    
edocol = globals.edocol
Literal = globals.Literal

#######################################################################            
# hulpfuncties           
def newuserid():
  """ pre: true
      post: return int, such that int > \forall id \in \UserID's """
  results = globals.g.query("""
                SELECT ?id 
                WHERE {?id edocol:type "person" . }""", 
                initNs=globals.ns).serialize(format="python")
  
  # return
  return  globals.getnewid(results)
 
# haalt de dubbele voorkomens uit een array.
def individual(results):
  indiv = []
  for n in range(len(results)):
    add = True
    for m in range(n):
      if results[n] == results[m]:
        add = False
    if add == True:
      indiv = indiv + [results[n]]  
      
  return indiv
  
#######################################################################
# voeg een nieuwe user toe  
def new(name, password, email):
  """ 
  pre: name is unique, email is unique
  post: db contains a user with name name and password password and a unique, never-used-before ID
  output: the user's unique ID
  """

  # precondition checks
  for obj in (name, password):										
    assert isinstance(obj, str), 'Argument(s) of wrong type!'		        # are these strings?
    
  assert re.match("^([a-zA-Z0-9_%+-]|([a-zA-Z0-9_%+-]+[a-zA-Z0-9._%+-][a-zA-Z0-9_%+-]+))@([a-zA-Z0-9_%+-]|([a-zA-Z0-9_%+-]+[a-zA-Z0-9._%+-][a-zA-Z0-9_%+-]+))[.][a-zA-Z]{2,6}$", email), 'not a valid email address'
 
  assert ( globals.g.subjects(edocol["type"], "person") <> [] ), 'ID is already taken'	# is the ID taken? 
  assert ( globals.g.subjects(edocol["name"], name) <> [] ), 'Name is already taken'	# is the name taken?

  # add new user
  try:
    id = newuserid()
  except:
    id = '0'
  globals.g.add( (edocol[id], edocol["type"], Literal("person"))   )   # add the person
  globals.g.add( (edocol[id], edocol["name"], Literal(name))         ) # add the name
  globals.g.add( (edocol[id], edocol["email"], Literal(email))       )	# add the email address  
  globals.g.add( (edocol[id], edocol["password"], Literal(password)) ) # add the password

  #Write database
  globals.writedb()
  return id

#######################################################################
# verander de waarde van een 1-waarde-eigenschap van een user (bijexample zn naam)
def setpropertyvalue(id, property, value):
  """ 
  pre: id is a userid in the database, property is a property in the namespace
  post: (id, property, value) is in the database, and is the only value for (id, property, ?v)
  output: True
  """  
  
  # precondition checks	
  assert isinstance(id, str), 'Argument of wrong type!'	
  assert isinstance(property, str), 'Argument of wrong type!'	
  assert isinstance(value, str), 'Argument of wrong type!'	

  assert globals.g.predicate_objects(id) <> [], 'User unknown'	        # is id an existing user?    
    
  # no assertion of existence of property: we don't care enough (yet).
  
  # so adding is still a bit rough.  
  globals.g.set( (edocol[id], edocol[property], Literal(value)) )    
  
  #Write database
  globals.writedb()
  return True 
  
#######################################################################
# add a value to a multi-value property of a user ( for ex. diplomas)
def addpropertyvalue(id, property, value):
  """ 
  pre: id is a userid in the database, property is a property in the namespace
  post: (id, property, value) is in the database
  output: True
  
  this is _not_ Graph.set: old values aren't deleted.
  """

  # precondition checks	
  assert isinstance(id, str), 'Argument of wrong type!'	
  assert isinstance(property, str), 'Argument of wrong type!'	
  assert isinstance(value, str), 'Argument of wrong type!'

  assert globals.g.predicate_objects(id) <> [], 'User unknown'	        # is id an existing user?    
    
  # no assertion of existence of property: we don't care enough (yet).
  
  # so adding is still a bit rough.  
  globals.g.add( (edocol[id], edocol[property], Literal(value)) )    
  
  #Write database
  globals.writedb()
  return True

#######################################################################
# ask for a (list of) value(s) of a property
def getpropertyvalue(id, property):
  """ 
  pre: id is a userid in the database
  post: True
  output: all values from triples (id, property, value), or nil if there is none
  """
  
  # precondition checks	
  assert isinstance(id, str), 'Argument of wrong type!'		    # is this a string?			           
  
  # find all info on property of user id
  results = globals.g.query("""
                SELECT ?value 
                WHERE {edocol:%s edocol:%s ?value . }""" % (id, property), 
                initNs=globals.ns).serialize('python')         
                                               
                             
  assert ( globals.g.predicate_objects(id) <> [] ), 'User does not exist or does not have property'  # any info at all?
  
  #Write database
  globals.writedb()
  return globals.parse_pyformat_one(results)

#######################################################################
# follow a user: doesn't have much use yet, but will.
def follow(follower_id, followed_id):
  """ 
  pre: follower_id and followed_id are in the database
  post: (follower_id, "follows", followed_id) and (followed_id, "followed_by", follower_id) are in the database
  output: True
  """
  
  for obj in (follower_id, followed_id):										
    assert isinstance(obj, str), 'Argument(s) of wrong type!'		  # are these strings?  
  
  assert ( globals.g.predicate_objects(edocol[follower_id]) <> [] ), 'Follower does not exist'	# does follower exist?
  assert ( globals.g.predicate_objects(edocol[followed_id]) <> [] ), 'Followed does not exist'	# does followed exist?  

  globals.g.add((edocol[follower_id], edocol["follows"], edocol[followed_id])) 
  
  #Write database
  globals.writedb()
  return True

#######################################################################
# delete a user and all outgoing relationships, but not the ingoing ones.
def delete(id):
  """ 
  pre: id is a user in the database
  post: all properties of the form (id, x, y) are gone.
  output: True
  """		
  
  # precondition checks	
  assert isinstance(id, str), 'Argument of wrong type!'		    # is this a string?					            
  
  # find all properties of user id
  targets = globals.g.query( """
                SELECT ?id ?p ?v 
                WHERE { edocol:%s ?p ?v .
                        ?id ?p ?v .}""" % id, 
                initNs=globals.ns).serialize('python')   
      
                                                          
  assert targets <> [], 'User does not exist'                 # is id an existing user?
  
  # deletes all references from user (including all data) while leaving references to the id intact.   
  for row in targets:
    globals.g.remove(row)
    
  #Write database
  globals.writedb()
  return True

#######################################################################
# remove 1 value of a property of a user
def deletepropertyvalue(id, property, value):
  """ 
  pre: (id, property, value) is in the database
  post: (id, property, value) is not in the database
  output: True
  """    
  
  # precondition checks	
  assert isinstance(id, str), 'Argument of wrong type!'	
  assert isinstance(property, str), 'Argument of wrong type!'	
  assert isinstance(value, str), 'Argument of wrong type!'

  assert ( globals.g.triples( (edocol[id], edocol[property], value) ) <> [] ), 'Given Property does not have given Value for given user' # exists?
                                                              
  # toevoegen
  globals.g.remove( (edocol[id], edocol[property], value) )  
  
  #Write database
  globals.writedb()
  return True 

#######################################################################
# get all information about a user (the output is a bit messy)
def getallinfo(id):
  """ 
  pre: id is a userid in the database
  post: True
  output: a list of tuples (property, value) containing all information about the user
  """
  
  # precondition checks	
  assert isinstance(id, str), 'Argument of wrong type!'                         # is this a string?					            
  
  # find all properties of user id
  results = globals.g.query( """
                SELECT ?p ?v 
                WHERE { edocol:%s ?p ?v .
                        ?id ?p ?v .}""" % id, 
                initNs=globals.ns).serialize(format='python')                                                   
                                                          
  assert results <> [], 'User does not exist'                                   # is id an existing user?

  #Write database
  globals.writedb()
  return globals.parse_pyformat_many(individual(results))

#print getallinfo('0')